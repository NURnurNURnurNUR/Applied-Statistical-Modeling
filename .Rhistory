HR_Analytics.csv <- read.csv("C:/Users/Admin/Downloads/attr/HR_Analytics.csv.csv", header=FALSE)
View(HR_Analytics.csv)
file.create("plots.R")
#file.create("functions.R")
file.create("functions.R")
file.create("main.R")
HR <- read.csv("C:/Users/Admin/Downloads/attr/HR.csv", header=FALSE)
View(HR)
View(HR_Analytics.csv)
View(HR_Analytics.csv)
rm(HR_Analytics.csv)
rm(HR)
# Call the plot functions defined in plots.Rplot_age_distribution(data)  # Display the plotplot_attrition_by_department(data)
# Load the dataset
data <- read.csv("HR.csv")
HR <- read.csv("C:/Users/Admin/Downloads/attr/HR.csv", header=FALSE)
View(HR)
# Load the dataset
data <- read.csv("HR.csv")
# Load the dataset
# Provide the full path to the CSV file
data <- read.csv("C:\Users\Admin\Downloads\attr")
# Load the dataset
# Provide the full path to the CSV file
data <- read.csv("C:/Users/Admin/Downloads/attr/HR.csv")
View(HR)
rm(HR)
library('ggplot2')
str(data)
# Summary statistics of the dataset
summary(data)
rm(main.R)
# Load the dataset
data <- read.csv("C:/Users/Admin/Downloads/attr/HR.csv", header= T, na.strings = '')
head(data)
check(data)
class(data)
summary(data)
data$JobRole <- as.factor(data$JobRole)
data$JobRole <- as.factor(data$JobRole)
str(data)
# Check for missing values
colSums(is.na(data))
summary(data)
head(data)
View(data)
# Convert relevant columns to factors
data$JobSatisfaction <- as.factor(data$JobSatisfaction)
#Determine the class of dataset
class(data)
# Check for missing values
colSums(is.na(data))
#Check the structure of data
str(data)
# Summary statistics of the dataset
summary(data)
# Handle outliers: Cap extreme values to a specific threshold (e.g., 1st and 99th percentiles)
for (col in numeric_columns) {
Q1 <- quantile(data[[col]], 0.25, na.rm = TRUE)
Q3 <- quantile(data[[col]], 0.75, na.rm = TRUE)
IQR_value <- Q3 - Q1
# Define limits for capping outliers
lower_limit <- Q1 - 1.5 * IQR_value
upper_limit <- Q3 + 1.5 * IQR_value
# Cap values outside the limits
data[[col]] <- ifelse(data[[col]] < lower_limit, lower_limit, data[[col]])
data[[col]] <- ifelse(data[[col]] > upper_limit, upper_limit, data[[col]])
}
for (col in numeric_columns) {
Q1 <- quantile(data[[col]], 0.25, na.rm = TRUE)
Q3 <- quantile(data[[col]], 0.75, na.rm = TRUE)
IQR_value <- Q3 - Q1
# Define limits for capping outliers
lower_limit <- Q1 - 1.5 * IQR_value
upper_limit <- Q3 + 1.5 * IQR_value
# Cap values outside the limits
data[[col]] <- ifelse(data[[col]] < lower_limit, lower_limit, data[[col]])
data[[col]] <- ifelse(data[[col]] > upper_limit, upper_limit, data[[col]])
}
for (col in columns_with_potential_outliers) {
hist(data[[col]],
main = paste("Histogram of", col),
xlab = col,
col = "lightblue",
border = "black",
breaks = 20) # Adjust the number of bins if necessary
}
# List of columns typically prone to outliers based on the context of HR data
columns_with_potential_outliers <- c("MonthlyIncome", "TotalWorkingYears", "YearsAtCompany",
"YearsInCurrentRole", "YearsSinceLastPromotion",
"DailyRate", "NumCompaniesWorked", "TrainingTimesLastYear")
columns_with_potential_outliers <- c("MonthlyIncome", "TotalWorkingYears", "YearsAtCompany",
"YearsInCurrentRole", "YearsSinceLastPromotion",
"DailyRate", "NumCompaniesWorked", "TrainingTimesLastYear")
hist(data[[col]],
main = paste("Histogram of", col),
xlab = col,
col = "lightblue",
border = "black",
breaks = 20) # Adjust the number of bins if necessary
for (col in columns_with_potential_outliers) {
hist(data[[col]], # Correctly accessing column data
main = paste("Histogram of", col),
xlab = col,
col = "lightblue",
border = "black",
breaks = 20) # Adjust the number of bins if necessary
}
for (col in columns_with_potential_outliers) {
hist(data[[col]], # Correctly accessing column data
main = paste("Histogram of", col),
xlab = col,
col = "lightblue",
border = "black",
breaks = 20) # Adjust the number of bins if necessary
}
# Draw histograms for these specific columns
par(mfrow = c(4, 5)) # Adjust the layout to display multiple histograms on one screen
for (col in columns_with_potential_outliers) {
hist(data[[col]], # Correctly accessing column data
main = paste("Histogram of", col),
xlab = col,
col = "lightblue",
border = "black",
breaks = 20) # Adjust the number of bins if necessary
}
for (col in columns_with_potential_outliers) {
hist(data[[col]], # Correctly accessing column data
main = paste("Histogram of", col),
xlab = col,
col = "lightblue",
border = "black",
breaks = 20) # Adjust the number of bins if necessary
}
for (col in columns_with_potential_outliers) {
hist(data[[col]],
main = paste("Histogram of", col),
xlab = col,
col = "lightgreen",
border = "black",
breaks = 20)
}
for (col in columns_with_potential_outliers) {
hist(data[[col]],
main = paste("Histogram of", col),
xlab = col,
col = "green",
border = "black",
breaks = 20)
}
hist(data[[col]], # Correctly accessing column data
main = paste("Histogram of", col),
xlab = col,
col = "lightgreen",
border = "black",
breaks = 20) # Adjust the number of bins if necessary
for (col in columns_with_potential_outliers) {
hist(data[[col]], # Correctly accessing column data
main = paste("Histogram of", col),
xlab = col,
col = "lightblue",
border = "black",
breaks = 20) # Adjust the number of bins if necessary
}
for (col in columns_with_potential_outliers) {
hist(data[[col]], # Correctly accessing column data
main = paste("Histogram of", col),
xlab = col,
col = "lightblue",
border = "black",
breaks = 20) # Adjust the number of bins if necessary
}
columns_with_potential_outliers <- c("MonthlyIncome", "TotalWorkingYears", "YearsAtCompany",
"YearsInCurrentRole", "YearsSinceLastPromotion",
"DailyRate", "NumCompaniesWorked", "TrainingTimesLastYear")
hist(data[[col]], # Correctly accessing column data
main = paste("Histogram of", col),
xlab = col,
col = "lightblue",
border = "black",
breaks = 20) # Adjust the number of bins if necessary
hist(data[[col]], # Correctly accessing column data
main = paste("Histogram of", col),
xlab = col,
col = "lightblue",
border = "black",
breaks = 20) # Adjust the number of bins if necessary
par(mfrow = c(2, 4)) # Adjust the layout to display multiple histograms on one screen
for (col in columns_with_potential_outliers) {
hist(data[[col]], # Correctly accessing column data
main = paste("Histogram of", col),
xlab = col,
col = "lightblue",
border = "black",
breaks = 20) # Adjust the number of bins if necessary
}
data_balanced <- ROSE(Attrition ~ ., data = data, seed = 123)$data
library(ROSE)
library(ROSE)
# Check the class distribution
table(data_balanced$Attrition)
install.packages("DMwR", dependencies = TRUE)
# Check the class distribution
table(data_balanced$Attrition)
table(data_balanced$Attrition)
# Check if data_balanced is created successfully
if (exists("data_balanced")) {
# Display the class distribution of the balanced dataset
table(data_balanced$Attrition)
} else {
cat("data_balanced object was not created successfully.\n")
}
if (exists("data_balanced")) {
# Display the class distribution of the balanced dataset
table(data_balanced$Attrition)
} else {
cat("data_balanced object was not created successfully.\n")
}
if (exists("data_balanced")) {
# Display the class distribution of the balanced dataset
table(data_balanced$Attrition)
} else {
cat("data_balanced object was not created successfully.\n")
}
library(DMwR)
chooseCRANmirror()
# Load the dataset
data <- read.csv("C:/Users/Admin/Downloads/attr/HR.csv", header = TRUE, na.strings = '')
# Convert relevant columns to factors
data$Attrition <- as.factor(data$Attrition)
data_balanced <- SMOTE(Attrition ~ ., data = data, perc.over = 100, perc.under = 200)
library(ubTools)
install.packages("ubTools", dependencies = TRUE)
library(ubTools)
library(ubTools)
R.version
library(ubTools)
install.packages("ubTools", dependencies = TRUE)
install.packages("ubTools")
library(ubTools)
packages.install(dplyr)
install.packages(dplyr)
install.packages("dplyr")
library(dplyr)
install.packages("ROSE")
library(ROSE)
# View the balanced dataset
table(balanced_data_rose$class)
# Generate a balanced dataset using ROSE
balanced_data_rose <- ROSE(class ~ ., data = data, seed = 1)$data
library(ROSE)
# View the balanced dataset
table(balanced_data_rose$class)
print(table(balanced_data_rose$class))
data <- data.frame(
class = factor(c(rep("A", 100), rep("B", 30))), # Imbalanced classes
feature1 = rnorm(130),
feature2 = rnorm(130)
)
print(table(data$class))
# Generate a balanced dataset using ROSE
balanced_data_rose <- ROSE(class ~ feature1 + feature2, data = data, seed = 1)$data
print(table(balanced_data_rose$class))
print(table(balanced_data_rose$class))
print(table(balanced_data_rose$class))
print(table(data$class))
# Optionally, you can view the first few rows of the balanced dataset
head(balanced_data_rose)
print(table(balanced_data_rose$class))
print(table(my_data$class))
print(table(data$class))
# Use ROSE to balance the dataset
# Make sure 'class' is replaced with the actual name of your target variable
balanced_data_rose <- ROSE(class ~ ., data = data, seed = 1)$data
# Optionally, you can view the first few rows of the balanced dataset
head(balanced_data_rose)
print(table(balanced_data_rose$class))
print(table(data$class))
# Display the results
print(t_test_result)
# Perform the T-test
t_test_result <- t.test(JobSatisfaction ~ Attrition, data = data)
# Check if Attrition is a factor
is.factor(data$Attrition)
# Ensure 'Attrition' is a factor
data$Attrition <- as.factor(data$Attrition)
# Display the results
print(t_test_result)
# Perform the T-test
t_test_result <- t.test(JobSatisfaction ~ Attrition, data = data)
data$JobSatisfaction <- as.factor(data$JobSatisfaction)
# Perform the T-test
t_test_result <- t.test(JobSatisfaction ~ Attrition, data = data)
# Perform the T-test
t_test_result <- t.test(JobSatisfaction ~ Attrition, data = data)
# Perform the T-test
t_test_result <- t.test(JobSatisfaction ~ Attrition, data = data)
source("C:/Users/Admin/OneDrive/Рабочий стол/R Project/functions.R")
install.packages("dplyr")
View(data)
# Perform the T-test
t_test_result <- t.test(JobSatisfaction ~ Attrition, data = data)
# Load the libraries
library('tidyverse')
library('ggplot2')
library(dplyr)
library(ROSE)
# Load the dataset
data <- read.csv("C:/Users/Admin/Downloads/attr/HR.csv", header= T, na.strings = '')
# Display the first few rows
head(data)
#Determine the class of dataset
class(data)
summary(data)
# Convert relevant columns to factors
data$JobSatisfaction <- as.factor(data$JobSatisfaction)
data$Attrition <- as.factor(data$Attrition)
# Load the dataset
data <- read.csv("C:/Users/Admin/Downloads/attr/HR.csv", header= T, na.strings = '')
data$Attrition <- as.factor(data$Attrition)
#Check the structure of data
str(data)
# Output the results
chi_square_test
# Create a contingency table
contingency_table <- table(data$job_satisfaction, data$attrition)
# Perform Chi-squared test
chi_square_test <- chisq.test(contingency_table)
# Checking the p-value
if (chi_square_test$p.value < 0.05) {
print("Reject the null hypothesis: Job satisfaction affects attrition.")
} else {
print("Fail to reject the null hypothesis: Job satisfaction does not affect attrition.")
}
# Perform Chi-squared test
chi_square_test <- chisq.test(contingency_table)
# Output the results
chi_square_test
# Create a contingency table
contingency_table <- table(data$job_satisfaction, data$attrition)
# Checking the p-value
if (chi_square_test$p.value < 0.05) {
print("Reject the null hypothesis: Job satisfaction affects attrition.")
} else {
print("Fail to reject the null hypothesis: Job satisfaction does not affect attrition.")
}
# Check if the Job Satisfaction column exists and is numeric
# Adjust 'JobSatisfaction' to match the actual column name
if ("JobSatisfaction" %in% colnames(data)) {
# Check for NAs and remove rows with NA in Job Satisfaction or Attrition
clean_data <- na.omit(data[, c("JobSatisfaction", "Attrition")])  # Adjust names as needed
# Perform the T-test using the cleaned data
t_test_result <- t.test(JobSatisfaction ~ Attrition, data = clean_data)
# Display the results
print(t_test_result)
} else {
print("JobSatisfaction column not found. Please check the column names.")
}
clean_data <- na.omit(data[, c("JobSatisfaction", "Attrition")])
if ("JobSatisfaction" %in% colnames(data)) {
clean_data <- na.omit(data[, c("JobSatisfaction", "Attrition")])
# Perform the T-test using the cleaned data
t_test_result <- t.test(JobSatisfaction ~ Attrition, data = clean_data)
print(t_test_result)
} else {
print("JobSatisfaction column not found. Please check the column names.")
}
ggplot(data, aes(x = Attrition, y = JobSatisfaction, fill = Attrition)) +
geom_boxplot() +
geom_jitter(width = 0.2, alpha = 0.5, color = "black") +
labs(title = "Job Satisfaction by Attrition Status",
x = "Attrition Status",
y = "Job Satisfaction Score") +
theme_minimal() +
scale_fill_manual(values = c("No" = "lightblue", "Yes" = "salmon")) +
theme(legend.position = "none")
ggplot(data, aes(x = Attrition, y = JobSatisfaction, fill = Attrition)) +
geom_boxplot() +
geom_jitter(width = 0.2, alpha = 0.5, color = "black") +
labs(title = "Job Satisfaction by Attrition Status",
x = "Attrition Status",
y = "Job Satisfaction Score") +
theme_minimal() +
scale_fill_manual(values = c("No" = "lightblue", "Yes" = "salmon")) +
theme(legend.position = "none")
ggplot(data, aes(x = Attrition, y = JobSatisfaction, fill = Attrition)) +
geom_boxplot() +
geom_jitter(width = 0.2, alpha = 0.5, color = "black") +
labs(title = "Job Satisfaction by Attrition Status",
x = "Attrition Status",
y = "Job Satisfaction Score") +
theme_minimal() +
scale_fill_manual(values = c("No" = "lightblue", "Yes" = "salmon")) +
theme(legend.position = "none")
# Assuming the dataset 'data' is already loaded and cleaned
# Create a boxplot to visualize Job Satisfaction by Attrition
ggplot(data, aes(x = Attrition, y = JobSatisfaction, fill = Attrition)) +
geom_boxplot() +
geom_jitter(width = 0.2, alpha = 0.5, color = "black") +  # Add jitter for better visibility
labs(title = "Job Satisfaction by Attrition Status",
x = "Attrition Status",
y = "Job Satisfaction Score") +
theme_minimal() +
scale_fill_manual(values = c("No" = "lightblue", "Yes" = "salmon")) +  # Custom colors
theme(legend.position = "none")  # Hide legend
ggplot(data, aes(x = Attrition, y = JobSatisfaction, fill = Attrition)) +
geom_boxplot() +
labs(title = "Job Satisfaction by Attrition Status",
x = "Attrition Status",
y = "Job Satisfaction Score") +
theme_minimal()
ggplot(data, aes(x = JobSatisfaction)) +
geom_bar(fill = "steelblue") +  # Choose a color for the bars
labs(title = "Count of Employees by Department",
x = "Department",
y = "Count of Employees") +
theme_minimal() +  # Use a minimal theme for better aesthetics
ggplot(data, aes(x = JobSatisfaction)) +
geom_bar(fill = "steelblue") +  # Choose a color for the bars
labs(title = "Count of Employees by Department",
x = "Department",
y = "Count of Employees") +
theme_minimal()
ggplot(data, aes(x = JobSatisfaction, y=JobSatisfaction.counts())) +
geom_bar(fill = "steelblue") +  # Choose a color for the bars
labs(title = "Count of Employees by Department",
x = "Department",
y = "Count of Employees") +
theme_minimal()
ggplot(data, aes(x = JobSatisfaction)) +
geom_bar(fill = "steelblue") +
theme_minimal()
library('ggplot2')
ggplot(data, aes(x = JobSatisfaction)) +
geom_bar(fill = "steelblue") +
theme_minimal()
library('ggplot2')
ggplot(data, aes(x = JobSatisfaction)) +
geom_bar(fill = "steelblue") +
theme_minimal()
